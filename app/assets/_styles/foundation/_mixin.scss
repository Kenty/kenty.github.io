/*==========  mix-in  ==========*/

// @mixin font-size($size, $line-height: true) {
//   font-size: $size + px;
//   font-size: calculateRem($size) + rem;
//   @if $line-height==true {
//     line-height: ceil($size / $rhythm-unit) * ($rhythm-unit / $size);
//     // line-height: 1.5;
//   }
// }
@mixin font-size($font-size-value, $line-height-value: auto) {
  font-size: $font-size-value * 1px;
  font-size: ($font-size-value / $base-font-size) * 1rem;

  @if $line-height-value == auto {
    line-height: ceil($font-size-value / $base-line-height) * ($base-line-height / $font-size-value);
  }

  @else {
    @if (type-of($line-height-value) == number or $line-height-value == inherit or $line-height-value == normal) {
      line-height: $line-height-value;
    }

    @else if($line-height-value != none and $line-height-value != false) {
      @warn ""#{$line-height-value}"is not a valid value for `line-heihgt`.";
    }
  }
}

@mixin background-image($args...) {
  background-image: $args;
}

@mixin box-shadow($args...) {
  box-shadow: $args;
}

@mixin text-shadow($args...) {
  text-shadow: $args;
}

@mixin border-radius($args...) {
  border-radius: $args;
}

@mixin transition($args...) {
  transition: $args;
}

@mixin appearance($args...) {
  -webkit-appearance: $args;
  -moz-appearance: $args;
  appearance: $args;
}

@mixin font-smooting($value: on) {
  @if ($value == on) {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

@mixin _clearfix($supportIE) {
  // &:after {
  //   display: block;
  //   visibility: hidden;
  //   height: 0;
  //   content: "\0020";
  // }
  &::after {
    display: table;
    clear: both;
    content: "";
  }
  @if ($supportIE == true) {
    *zoom: 1;
  } // &:before,
}

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

@mixin my-photoframe {
  background-color: lighten($primary-color, 20%);
  border: 1px solid lighten($primary-color, 8%);
  padding: $base-spacing-unit--tiny;
}

@mixin gradient($color, $orientation) {
  background: $color;
  border: 2px solid scale-color(rgba($color, .85), $lightness: 10%);

  @if $orientation == vertical {
    @include background-image(linear-gradient(to bottom, $color 0%, scale-color($color, $lightness: -10%) 100%));
  }

  @if $orientation == horizontal {
    @include background-image(linear-gradient(to right, $color 0%, scale-color($color, $lightness: -10%) 100%));
  }

  @else {
    background-image: radial-gradient(center, circle cover, $color 0%, scale-color($color, $lightness: -10%) 100%);
    background-image: -webkit-radial-gradient(center, circle cover, $color 0%, scale-color($color, $lightness: -10%) 100%);
  }
}

@mixin button-gradient($color) {
  @include background-image(linear-gradient($color 0%, scale-color($color, $lightness: -10%) 100%));

  background-color: $color;
  border: 2px solid scale-color(rgba($color, .85), $lightness: 10%);
}

// Typekit web-font
@mixin web-font($t-kit, $style: italic, $weight: 900) {
  font-family: $t-kit;
  font-style: $style;
  font-weight: $weight;
  font-feature-settings: "liga" on;
  font-kerning: none;

  @at-root .wf-loading &{
    font-family: Georgia, serif;
    font-weight: 200;
    font-style: normal;
  }
}

@mixin background-image-retina($filename, $type, $width, $height) {
  background-image: url($filename + '.' + $type);

  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (-moz-min-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
    & {
      background-image: url($filename + '@2x.' + $type);
      -webkit-background-size: $width $height;
      -moz-background-size: $width $height;
      -o-background-size: $width $height;
      background-size: $width $height;
    }
  }
}

// BEM mixins
@mixin new($block, $type: null) {
  @at-root {
    @if $type != null {
      .#{$block}-#{$type} {
        @content;
      }
    }

    @else {
      .#{$block} {
        @content;
      }
    }
  }
}

@mixin has($element) {
  &__#{$element} {
    @content;
  }
}

@mixin when($modifier) {
  &--#{$modifier} {
    @content;
  }
}

@mixin if-its($state) {
  & .is-#{$state} {
    @content;
  }
}

// https://www.sassmeister.com/gist/9638030
@mixin breakpoint($breakpoint) {
  $value: map-get($breakpoints, $breakpoint); // @if ($value != null) {
  //   // 1
  // $current-breakpoint: $breakpoint !global; // 2
  //   @media (min-width: $value) {
  //     @content;
  //   } // 3
  // $current-breakpoint: $default-breakpoint !global; // 5
  // }
  @if map-has-key($breakpoints, $breakpoint) {
    $current-breakpoint: $breakpoint !global; // 2
    @media (min-width: $value) {
      @content;
    }
    $current-breakpoint: $default-breakpoint !global; // 5
  }

  @else {
    @warn "Invalid breakpoint `#{$breakpoint}`."; // 6
  }
}

@mixin placeholders($name) {
  @if not index($placeholders, $name) {
    $placeholders: append($placeholders, $name) !global;

    @at-root {
      %#{$name}-#{$default-breakpoint} {
        @content;
      }
      @each $breakpoint, $value in $breakpoints {
        @media (min-width: $value) {
          %#{$name}-#{$breakpoint} {
            @content;
          }
        }
      }
    }
  }

  @else {
    @warn "Placeholder `#{$name}` already exists.";
  }
}

// Extend the accurate placeholder
// according to the current scope
// Basically instead of doing:
//    @extend %clear;
// You go:
//    @include _(clear);
// Not much longer, is it?
@mixin _($name) {
  @extend %#{$name}-#{$current-breakpoint} !optional;
}

@mixin absolute-content() {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  content: "";
}


/*==========  %Placeholder  ==========*/

%photo-shadow {
  @include my-photoframe;
}

%link-anchor {
  padding: 3.125em 0;
  text-align: center;
}

%hr-sepalate {
  display: block;
  border: 0;
  margin: 8em 0 5em;
  padding: 0;
  height: 0;
  font-weight: 700;
  font-size: 2em;
  line-height: 1;
  clear: both;
  text-align: center;

  &:after {
    color: scale-color($primary-color, $lightness: 50%);
    padding-left: 1em;
    height: 0;
    content: "";
    letter-spacing: 1em;
  }
}

%fontawesome {

  @include font-smooting(on);

  font-family: 'FontAwesome';
  font-weight: normal;
  font-style: normal;
}
